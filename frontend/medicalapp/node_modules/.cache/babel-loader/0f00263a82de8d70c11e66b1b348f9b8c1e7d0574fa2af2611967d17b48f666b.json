{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.3): util/component-functions.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler';\nimport { getElementFromSelector, isDisabled } from './index';\nconst enableDismissTrigger = function (component) {\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hide';\n  const clickEvent = `click.dismiss${component.EVENT_KEY}`;\n  const name = component.NAME;\n  EventHandler.on(document, clickEvent, `[data-bs-dismiss=\"${name}\"]`, function (event) {\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n    if (isDisabled(this)) {\n      return;\n    }\n    const target = getElementFromSelector(this) || this.closest(`.${name}`);\n    const instance = component.getOrCreateInstance(target);\n\n    // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n    instance[method]();\n  });\n};\nexport { enableDismissTrigger };","map":{"version":3,"names":["EventHandler","getElementFromSelector","isDisabled","enableDismissTrigger","component","method","arguments","length","undefined","clickEvent","EVENT_KEY","name","NAME","on","document","event","includes","tagName","preventDefault","target","closest","instance","getOrCreateInstance"],"sources":["D:/Medical/ReactMedical/medicalapp/node_modules/bootstrap/js/src/util/component-functions.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.3): util/component-functions.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler'\nimport { getElementFromSelector, isDisabled } from './index'\n\nconst enableDismissTrigger = (component, method = 'hide') => {\n  const clickEvent = `click.dismiss${component.EVENT_KEY}`\n  const name = component.NAME\n\n  EventHandler.on(document, clickEvent, `[data-bs-dismiss=\"${name}\"]`, function (event) {\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault()\n    }\n\n    if (isDisabled(this)) {\n      return\n    }\n\n    const target = getElementFromSelector(this) || this.closest(`.${name}`)\n    const instance = component.getOrCreateInstance(target)\n\n    // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n    instance[method]()\n  })\n}\n\nexport {\n  enableDismissTrigger\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,YAAY,MAAM,sBAAsB;AAC/C,SAASC,sBAAsB,EAAEC,UAAU,QAAQ,SAAS;AAE5D,MAAMC,oBAAoB,GAAG,SAAAA,CAACC,SAAS,EAAsB;EAAA,IAApBC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,MAAM;EACtD,MAAMG,UAAU,GAAI,gBAAeL,SAAS,CAACM,SAAU,EAAC;EACxD,MAAMC,IAAI,GAAGP,SAAS,CAACQ,IAAI;EAE3BZ,YAAY,CAACa,EAAE,CAACC,QAAQ,EAAEL,UAAU,EAAG,qBAAoBE,IAAK,IAAG,EAAE,UAAUI,KAAK,EAAE;IACpF,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACC,OAAO,CAAC,EAAE;MACxCF,KAAK,CAACG,cAAc,CAAC,CAAC;IACxB;IAEA,IAAIhB,UAAU,CAAC,IAAI,CAAC,EAAE;MACpB;IACF;IAEA,MAAMiB,MAAM,GAAGlB,sBAAsB,CAAC,IAAI,CAAC,IAAI,IAAI,CAACmB,OAAO,CAAE,IAAGT,IAAK,EAAC,CAAC;IACvE,MAAMU,QAAQ,GAAGjB,SAAS,CAACkB,mBAAmB,CAACH,MAAM,CAAC;;IAEtD;IACAE,QAAQ,CAAChB,MAAM,CAAC,CAAC,CAAC;EACpB,CAAC,CAAC;AACJ,CAAC;AAED,SACEF,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}