{"ast":null,"code":"var _jsxFileName = \"D:\\\\Medical\\\\ReactMedical\\\\medicalapp\\\\src\\\\Components\\\\MainComponent.js\";\nimport React, { Component } from 'react';\nimport Overlay from \"./overlay\";\nimport Navbar from './Navbar';\nimport Sidebar from './Sidebar';\nimport GoogleFontLoader from \"react-google-font-loader\";\nimport \"adminbsb-materialdesign/css/themes/all-themes.css\";\nimport NavPage from './NavPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainComponent extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      bodyClass: \"theme-red ls-closed\",\n      displayOverlay: \"none\",\n      width: window.screen.width\n    };\n    this.onBarClick = () => {\n      if (this.state.bodyClass === \"theme-red ls-closed overlay-open\") {\n        this.setState({\n          bodyClass: \"theme-red ls-closed\"\n        });\n        this.setState({\n          displayOverlay: \"none\"\n        });\n      } else if (this.state.bodyClass === \"theme-red ls-closed\") {\n        this.setState({\n          bodyClass: \"theme-red ls-closed overlay-open\"\n        });\n        this.setState({\n          displayOverlay: \"block\"\n        });\n      }\n    };\n    this.onscreenresize = () => {\n      console.log(window.screen.width);\n      this.setState({\n        width: window.screen.width\n      });\n    };\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.onscreenresize);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.onscreenresize);\n  }\n  componentDidMount() {\n    var inputall = document.querySelectorAll(\"input\");\n    inputall.forEach(input => {\n      input.addEventListener(\"focus\", function () {\n        this.parentNode.className;\n      });\n    });\n  }\n  render() {\n    if (this.state.width > 1150) {\n      document.getElementById(\"root\").className = \"theme-red\";\n    } else {\n      document.getElementById(\"root\").className = this.state.bodyClass;\n    }\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(GoogleFontLoader, {\n        fonts: [{\n          font: \"Roboto\",\n          weights: [400, 700]\n        }],\n        subsets: [\"latin\", \"cyrillic-ext\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GoogleFontLoader, {\n        fonts: [{\n          font: \"Material+Icons\"\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Overlay, {\n        display: this.state.displayOverlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        onBarClick: this.onBarClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n        activepage: this.props.activepage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Overlay","Navbar","Sidebar","GoogleFontLoader","NavPage","jsxDEV","_jsxDEV","MainComponent","constructor","arguments","state","bodyClass","displayOverlay","width","window","screen","onBarClick","setState","onscreenresize","console","log","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","inputall","document","querySelectorAll","forEach","input","parentNode","className","render","getElementById","Fragment","children","fonts","font","weights","subsets","fileName","_jsxFileName","lineNumber","columnNumber","display","activepage","props"],"sources":["D:/Medical/ReactMedical/medicalapp/src/Components/MainComponent.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport Overlay from \"./overlay\"\r\nimport Navbar from './Navbar'\r\nimport Sidebar from './Sidebar'\r\nimport GoogleFontLoader from \"react-google-font-loader\";\r\nimport \"adminbsb-materialdesign/css/themes/all-themes.css\"\r\nimport NavPage from './NavPage';\r\n\r\nexport default class MainComponent extends Component {\r\n    state = {\r\n        bodyClass:\"theme-red ls-closed\",\r\n        displayOverlay:\"none\",\r\n        width:window.screen.width\r\n    }\r\n\r\n    onBarClick=()=>{\r\n        if (this.state.bodyClass===\"theme-red ls-closed overlay-open\"){\r\n            this.setState({bodyClass:\"theme-red ls-closed\"})\r\n            this.setState({displayOverlay:\"none\"})\r\n        }\r\n        else if(this.state.bodyClass===\"theme-red ls-closed\"){\r\n            this.setState({bodyClass:\"theme-red ls-closed overlay-open\"})\r\n            this.setState({displayOverlay:\"block\"})\r\n        }\r\n      }\r\n    onscreenresize = () => {\r\n    console.log(window.screen.width);\r\n    this.setState({ width: window.screen.width });\r\n  };\r\n\r\n    componentDidMount() {\r\n    window.addEventListener(\"resize\", this.onscreenresize);\r\n  }\r\n\r\n    componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.onscreenresize);\r\n  }\r\n\r\n  componentDidMount(){\r\n    var inputall=document.querySelectorAll(\"input\")\r\n    inputall.forEach((input)=>{\r\n      input.addEventListener(\"focus\",function(){\r\n        this.parentNode.className\r\n      })\r\n    })\r\n  }\r\n  render() {\r\n    if(this.state.width>1150){\r\n        document.getElementById(\"root\").className = \"theme-red\"\r\n    }else{\r\n        document.getElementById(\"root\").className = this.state.bodyClass\r\n    }\r\n\r\n    \r\n    \r\n    return (\r\n      <React.Fragment>\r\n        <GoogleFontLoader\r\n          fonts={[\r\n            {\r\n              font: \"Roboto\",\r\n              weights: [400, 700],\r\n            },\r\n          ]}\r\n          subsets={[\"latin\", \"cyrillic-ext\"]}\r\n        />\r\n        <GoogleFontLoader\r\n          fonts={[\r\n            {\r\n              font: \"Material+Icons\",\r\n            },\r\n          ]}\r\n        />\r\n        <Overlay display={this.state.displayOverlay}/>\r\n        <Navbar onBarClick={this.onBarClick}/>\r\n        <Sidebar activepage={this.props.activepage}/>\r\n        <NavPage/>\r\n\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}