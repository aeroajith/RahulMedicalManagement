{"ast":null,"code":"import axios from \"axios\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nconst {\n  default: AuthHandler\n} = require(\"./AuthHandler\");\nconst {\n  default: Config\n} = require(\"./config\");\nclass APIHandler {\n  async checkLogin() {\n    if (AuthHandler.checkTokenExpiry()) {\n      try {\n        var response = await axios.post(Config.refreshApiUrl, {\n          refresh: AuthHandler.getRefreshToken()\n        });\n        reactLocalStorage.set(\"token\", response.data.access);\n      } catch (error) {\n        console.log(error);\n        //Not using a valid token then refresh and logout the user\n        AuthHandler.logoutUser();\n        window.location = '/';\n      }\n    }\n  }\n  async saveCompanyData(name, license_no, address, contact_no, email, description) {\n    await this.checkLogin();\n    //wait untill token get updated\n    var response = await axios.post(Config.companyApiUrl, {\n      name: name,\n      license_no: license_no,\n      address: address,\n      contact_no: contact_no,\n      email: email,\n      description: description\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n  async fetchAllCompany() {\n    await this.checkLogin();\n    var response = await axios.get(Config.companyApiUrl, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n  async fetchCompanyDetails(id) {\n    await this.checkLogin();\n    var response = await axios.get(Config.companyApiUrl + \"\" + id + \"/\", {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n  async editCompanyData(name, license_no, address, contact_no, email, description, id) {\n    await this.checkLogin();\n    //wait untill token get updated\n    var response = await axios.put(Config.companyApiUrl + \"\" + id + '/', {\n      name: name,\n      license_no: license_no,\n      address: address,\n      contact_no: contact_no,\n      email: email,\n      description: description\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n  async saveCompanyData(name, license_no, address, contact_no, email, description) {\n    await this.checkLogin();\n    //wait untill token get updated\n    var response = await axios.post(Config.companyApiUrl, {\n      name: name,\n      license_no: license_no,\n      address: address,\n      contact_no: contact_no,\n      email: email,\n      description: description\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n}\nexport default APIHandler;","map":{"version":3,"names":["axios","reactLocalStorage","default","AuthHandler","require","Config","APIHandler","checkLogin","checkTokenExpiry","response","post","refreshApiUrl","refresh","getRefreshToken","set","data","access","error","console","log","logoutUser","window","location","saveCompanyData","name","license_no","address","contact_no","email","description","companyApiUrl","headers","Authorization","getLoginToken","fetchAllCompany","get","fetchCompanyDetails","id","editCompanyData","put"],"sources":["D:/Medical/ReactMedical/medicalapp/src/utils/APIHandler.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { reactLocalStorage } from \"reactjs-localstorage\";\r\nconst { default: AuthHandler } = require(\"./AuthHandler\");\r\n\r\nconst {default: Config} = require (\"./config\")\r\n\r\n\r\n \r\nclass APIHandler{\r\n    async checkLogin(){\r\n        if(AuthHandler.checkTokenExpiry()){\r\n            try{\r\n            var response = await axios.post(Config.refreshApiUrl,{\r\n                refresh: AuthHandler.getRefreshToken()\r\n            }) \r\n            reactLocalStorage.set(\"token\",response.data.access) \r\n        }\r\n        catch(error){\r\n            console.log(error)\r\n            //Not using a valid token then refresh and logout the user\r\n            AuthHandler.logoutUser()\r\n            window.location = '/'\r\n        }\r\n        }\r\n        \r\n    }\r\n    async saveCompanyData(\r\n        name,\r\n        license_no,\r\n        address,\r\n        contact_no,\r\n        email,\r\n        description\r\n        ){\r\n        await this.checkLogin()\r\n        //wait untill token get updated\r\n        var response = await axios.post(\r\n            Config.companyApiUrl,{\r\n                name:name,\r\n                license_no:license_no,\r\n                address:address,\r\n                contact_no:contact_no,\r\n                email:email,\r\n                description:description,\r\n            },\r\n        {headers:{Authorization: \"Bearer \" + AuthHandler.getLoginToken()}})\r\n        return response;\r\n    }\r\n    async fetchAllCompany(){\r\n        await this.checkLogin()\r\n\r\n        var response = await axios.get(\r\n            Config.companyApiUrl,\r\n            {\r\n                headers:{Authorization: \"Bearer \" + AuthHandler.getLoginToken()}\r\n            })\r\n            return response;\r\n    }\r\n\r\n    async fetchCompanyDetails(id){\r\n        await this.checkLogin()\r\n\r\n        var response = await axios.get(\r\n            Config.companyApiUrl+\"\"+id+\"/\",\r\n            {\r\n                headers:{Authorization: \"Bearer \" + AuthHandler.getLoginToken()}\r\n            })\r\n            return response;\r\n    }\r\n\r\n    async editCompanyData(\r\n        name,\r\n        license_no,\r\n        address,\r\n        contact_no,\r\n        email,\r\n        description,\r\n        id\r\n        ){\r\n        await this.checkLogin()\r\n        //wait untill token get updated\r\n        var response = await axios.put(\r\n            Config.companyApiUrl+\"\"+id+'/',{\r\n                name:name,\r\n                license_no:license_no,\r\n                address:address,\r\n                contact_no:contact_no,\r\n                email:email,\r\n                description:description,\r\n            },\r\n        {headers:{Authorization: \"Bearer \" + AuthHandler.getLoginToken()}})\r\n        return response;\r\n    }\r\n    async saveCompanyData(\r\n        name,\r\n        license_no,\r\n        address,\r\n        contact_no,\r\n        email,\r\n        description\r\n        ){\r\n        await this.checkLogin()\r\n        //wait untill token get updated\r\n        var response = await axios.post(\r\n            Config.companyApiUrl,{\r\n                name:name,\r\n                license_no:license_no,\r\n                address:address,\r\n                contact_no:contact_no,\r\n                email:email,\r\n                description:description,\r\n            },\r\n        {headers:{Authorization: \"Bearer \" + AuthHandler.getLoginToken()}})\r\n        return response;\r\n    }\r\n}\r\n\r\nexport default APIHandler"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}