{"ast":null,"code":"import axios from \"axios\";\nimport Config from \"./config\";\nimport { reactLocalStorage } from 'reactjs-localstorage';\nclass AuthHandler {\n  static login(username, password, callback) {\n    axios.post(Config.loginURL, {\n      username: username,\n      password: password\n    }).then(function (response) {\n      if (response.status === 200) {\n        reactLocalStorage.set(\"token\", response.data.access);\n        reactLocalStorage.set(\"refresh\", response.data.refresh);\n        callback({\n          error: false,\n          message: \"Login Successfull...\"\n        });\n      }\n    }).catch(function (error) {\n      console.log(error.response);\n      callback({\n        error: true,\n        message: \"Error During Login Invalid Login Details..\"\n      });\n    });\n  }\n  static loggedIn() {\n    if (reactLocalStorage.get(\"token\") && reactLocalStorage.get(\"refresh\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  static getLoginToken() {\n    return reactLocalStorage.get(\"token\");\n  }\n  static getRefreshToken() {\n    return reactLocalStorage.get(\"refresh\");\n  }\n  static logoutUser() {\n    reactLocalStorage.remove(\"token\");\n    reactLocalStorage.remove(\"refresh\");\n  }\n  static checkTokenExpiry() {\n    var expire = false;\n    var token = this.getLoginToken();\n    var tokenArray = token.split(\".\");\n    var jwt = JSON.parse(atob(tokenArray[1]));\n    if (jwt && jwt.exp && Number.isFinite(jwt.exp)) {\n      expire = jwt.exp * 100;\n    } else {\n      expire = false;\n    }\n    if (!expire) {\n      return false;\n    }\n    re;\n  }\n}\nexport default AuthHandler;","map":{"version":3,"names":["axios","Config","reactLocalStorage","AuthHandler","login","username","password","callback","post","loginURL","then","response","status","set","data","access","refresh","error","message","catch","console","log","loggedIn","get","getLoginToken","getRefreshToken","logoutUser","remove","checkTokenExpiry","expire","token","tokenArray","split","jwt","JSON","parse","atob","exp","Number","isFinite","re"],"sources":["D:/Medical/ReactMedical/medicalapp/src/utils/AuthHandler.js"],"sourcesContent":["import axios from \"axios\"\r\nimport Config from \"./config\"\r\nimport {reactLocalStorage} from 'reactjs-localstorage'\r\n\r\nclass AuthHandler{\r\n    static login (username,password,callback){\r\n\r\n        axios.post(Config.loginURL,{username:username,password:password})\r\n        .then(function(response){\r\n            if(response.status===200){\r\n                reactLocalStorage.set(\"token\",response.data.access)\r\n                reactLocalStorage.set(\"refresh\",response.data.refresh)\r\n                callback({error:false,message:\"Login Successfull...\"})\r\n            }\r\n            \r\n        })\r\n        .catch(function(error){\r\n            console.log(error.response)\r\n            callback({error:true,message:\"Error During Login Invalid Login Details..\"})\r\n        })\r\n\r\n    }\r\n    static loggedIn(){\r\n        if(reactLocalStorage.get(\"token\") && reactLocalStorage.get(\"refresh\")){\r\n            return true\r\n        }else{\r\n            return false\r\n        }\r\n        \r\n    }\r\n\r\n    static getLoginToken(){\r\n        return reactLocalStorage.get(\"token\")\r\n    }\r\n    static getRefreshToken(){\r\n        return reactLocalStorage.get(\"refresh\")\r\n    }\r\n    static logoutUser(){\r\n        reactLocalStorage.remove(\"token\")\r\n        reactLocalStorage.remove(\"refresh\")\r\n    }\r\n\r\n    static checkTokenExpiry(){\r\n        var expire = false;\r\n        var token = this.getLoginToken();\r\n        var tokenArray = token.split(\".\");\r\n        var jwt=JSON.parse(atob(tokenArray[1]));\r\n        if(jwt && jwt.exp && Number.isFinite(jwt.exp)){\r\n            expire=jwt.exp*100\r\n        }else{\r\n            expire=false\r\n        }\r\n        if(!expire){\r\n            return false\r\n        }\r\n        re\r\n    }\r\n}\r\n\r\nexport default AuthHandler"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAAQC,iBAAiB,QAAO,sBAAsB;AAEtD,MAAMC,WAAW;EACb,OAAOC,KAAKA,CAAEC,QAAQ,EAACC,QAAQ,EAACC,QAAQ,EAAC;IAErCP,KAAK,CAACQ,IAAI,CAACP,MAAM,CAACQ,QAAQ,EAAC;MAACJ,QAAQ,EAACA,QAAQ;MAACC,QAAQ,EAACA;IAAQ,CAAC,CAAC,CAChEI,IAAI,CAAC,UAASC,QAAQ,EAAC;MACpB,IAAGA,QAAQ,CAACC,MAAM,KAAG,GAAG,EAAC;QACrBV,iBAAiB,CAACW,GAAG,CAAC,OAAO,EAACF,QAAQ,CAACG,IAAI,CAACC,MAAM,CAAC;QACnDb,iBAAiB,CAACW,GAAG,CAAC,SAAS,EAACF,QAAQ,CAACG,IAAI,CAACE,OAAO,CAAC;QACtDT,QAAQ,CAAC;UAACU,KAAK,EAAC,KAAK;UAACC,OAAO,EAAC;QAAsB,CAAC,CAAC;MAC1D;IAEJ,CAAC,CAAC,CACDC,KAAK,CAAC,UAASF,KAAK,EAAC;MAClBG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAACN,QAAQ,CAAC;MAC3BJ,QAAQ,CAAC;QAACU,KAAK,EAAC,IAAI;QAACC,OAAO,EAAC;MAA4C,CAAC,CAAC;IAC/E,CAAC,CAAC;EAEN;EACA,OAAOI,QAAQA,CAAA,EAAE;IACb,IAAGpB,iBAAiB,CAACqB,GAAG,CAAC,OAAO,CAAC,IAAIrB,iBAAiB,CAACqB,GAAG,CAAC,SAAS,CAAC,EAAC;MAClE,OAAO,IAAI;IACf,CAAC,MAAI;MACD,OAAO,KAAK;IAChB;EAEJ;EAEA,OAAOC,aAAaA,CAAA,EAAE;IAClB,OAAOtB,iBAAiB,CAACqB,GAAG,CAAC,OAAO,CAAC;EACzC;EACA,OAAOE,eAAeA,CAAA,EAAE;IACpB,OAAOvB,iBAAiB,CAACqB,GAAG,CAAC,SAAS,CAAC;EAC3C;EACA,OAAOG,UAAUA,CAAA,EAAE;IACfxB,iBAAiB,CAACyB,MAAM,CAAC,OAAO,CAAC;IACjCzB,iBAAiB,CAACyB,MAAM,CAAC,SAAS,CAAC;EACvC;EAEA,OAAOC,gBAAgBA,CAAA,EAAE;IACrB,IAAIC,MAAM,GAAG,KAAK;IAClB,IAAIC,KAAK,GAAG,IAAI,CAACN,aAAa,CAAC,CAAC;IAChC,IAAIO,UAAU,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;IACjC,IAAIC,GAAG,GAACC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,IAAGE,GAAG,IAAIA,GAAG,CAACI,GAAG,IAAIC,MAAM,CAACC,QAAQ,CAACN,GAAG,CAACI,GAAG,CAAC,EAAC;MAC1CR,MAAM,GAACI,GAAG,CAACI,GAAG,GAAC,GAAG;IACtB,CAAC,MAAI;MACDR,MAAM,GAAC,KAAK;IAChB;IACA,IAAG,CAACA,MAAM,EAAC;MACP,OAAO,KAAK;IAChB;IACAW,EAAE;EACN;AACJ;AAEA,eAAerC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}